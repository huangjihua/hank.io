(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{455:function(e,t,n){"use strict";n.r(t);var v=n(0),_=Object(v.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("p",[n("code",[e._v("useRequest")]),e._v(" 是一个强大的异步数据管理的 Hooks，React 项目中的网络请求场景使用 "),n("code",[e._v("useRequest")]),e._v(" 就够了。"),n("code",[e._v("useRequest")]),e._v(" 通过插件式组织代码，核心代码极其简单，并且可以很方便的扩展出更高级的功能。目前已有能力包括：")]),e._v(" "),n("ul",[n("li",[e._v("自动请求/手动请求")]),e._v(" "),n("li",[e._v("轮询")]),e._v(" "),n("li",[e._v("防抖")]),e._v(" "),n("li",[e._v("节流"),n("br"),e._v("\n屏幕聚焦重新请求"),n("br"),e._v("\n错误重试"),n("br"),e._v("\nloading delay"),n("br"),e._v("\nSWR(stale-while-revalidate)"),n("br"),e._v("\n缓存")])])])}],!1,null,null,null);t.default=_.exports}}]);